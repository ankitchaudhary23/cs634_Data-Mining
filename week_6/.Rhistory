group_by(adaptations) %>%
tally()
g %%
q()
library(mlbench)
q()
library(mlbench)
data(mlbench)
data("mlbench")
data(package="mlbench")
library(tidyverse)
forest<- read_csv("/Users/ankitchaudhary/Documents/sem1_fall18/cs634_DataMining/week_6/forests.txt")
str(forest)
glimpse(forest)
class(forest)
?split
split(forest)
length(forest)
library('arules')
length(forest, forest[,])
split(forest, forest[,])
inspect(forest)
?itemFrequency
library(arules)
q()
library(arules)
q()
library(mlbench)
library("mlbench")
library(mlbench)
library(tidyverse)
library(mlbench)
.libPaths()
.libPaths("/usr/local/lib/R/3.5/site-library/")
library(mlbench)
.libPaths("/usr/local/Cellar/r/3.5.1/lib/R/library/")
library(mlbench)
library(mlbench)
.libPaths()
d
data(package="mbench")
data(package="mlbench")
data(PimaIndiansDiabetes)
head(PimaIndiansDiabetes)
cor(PimaIndiansDiabetes)
data(iris)
head(iris)
summary(iriss)
summary(iris)
cor(iris)
?cor
cor(iris$Sepal.Length)
cor(iris$Sepal.Length, iris$Petal.Length)
library(tidyverse)
library(reshape2)
housing<- read_csv("housing.csv")
head(housing)
glimpse(housing)
summary(housing)
which(is.na(housing$total_bedrooms))
head(housing$ocean_proximity)
head(housing$ocean_proximity, 50)
unique(housing$ocean_proximity)
?par
colnames(housing)
#gander at variables
ggplot(data  = housing, mapping= aes(x = value)) + geom_histogram(bins = 30))
ggplot(data  = housing, mapping= aes(x = value)) + geom_histogram(bins = 30)
ggplot(data  = housing, mapping= aes(x = value)) + geom_histogram(bins = 30) + facet_wrap(~variable, scales= 'free_x')
ggplot(data = melt(housing), mapping = aes(x = value)) +
geom_histogram(bins = 30) + facet_wrap(~variable, scales = 'free_x')
ggplot(data  = housing, mapping= aes(x = value)) + geom_histogram(bins = 30) + facet_wrap(~variable, scales= 'free_x')
ggplot(data = melt(housing), mapping = aes(x = value)) +
geom_histogram(bins = 30) + facet_wrap(~variable, scales = 'free_x')
colnames(housing)
firstname<- c("Ankit", "Kanishkaa", "Sakshi")
age<- c(24, 23, 19)
IQ<- c(160, 140, 120)
people,- data.frame(firstname, age, IQ)
people<- data.frame(firstname, age, IQ)
people
class(people)
?melt
meltedPeople<- melt(people, id = "firstname")
meltedPeople
people$lastname<- c("chaudhary", "chhabra", "chaudhary")
people
people<- people[, c(1, 4, 2,3)]
people
meltedPeople2<- melt(people, id = "firstname", "lastname")
meltedPeople2
meltedPeople2<- melt(people, id = c("firstname", "lastname"))
meltedPeople2
meltedPeople2
data(iris)
head(iris)
meltedIris<- melt(iris, id= "Species")
meltedIris %>% head
meltedIris %>% hea
meltedIris %>% head(10)
meltedIris %>% head(600)
meltedIris %>% head(60)
meltedIris %>% head(200)
data(mtcars)
head(mtcars)
glimpse(mtcars)
row.names(mtcars)
mtcars$models<- row.names(mtcars)
mtcars %>% head
meltedCras<- melt(mtcars, id = "model")
meltedCras<- melt(mtcars, id = "models")
meltedCras
meltedPeople2
castPeople2<- dcast(meltedPeople2, firstname + lastname ~ variable)
castPeople2
castPeople2<- dcast(meltedPeople2, firstname + lastname)
castPeople2<- dcast(meltedPeople2, firstname + lastname ~ variable)
castPeople2
melthousing<- melt(housing, id = "ocean_proximity")
melthousing
ggplot( data = melthousing, mapping=aes(x = value)) + geom_histogram(bins=30)  + facet_wrap(~ variable, scales = "free_x")
ggplot( data = melthousing, mapping=aes(x = values)) + geom_histogram(bins=30)  + facet_wrap(~ variable, scales = "free_x")
ggplot( data = melthousing, mapping=aes(x = value)) + geom_histogram(bins=30)  + facet_wrap(~ variable, scales = "free_x")
melt(housing) %>% head
exit
q()
library(tidyverse)
library(reshape2)
housing %>% head
summary(housing)
housing$total_bedrooms[is.na(housing$total_bedrooms)]
housing$total_bedrooms[is.na(housing$total_bedrooms)] = median(housing$total_bedrooms, na.rm= TRUE)
housing$total_bedrooms[is.na(housing$total_bedrooms)]
head(housing)
summary(housing)
housing$total_bedrooms[is.na(housing$total_bedrooms)] = mean(housing$total_bedrooms, na.rm= TRUE)
summary(housing)
housing$total_bedrooms[is.na(housing$total_bedrooms)] = median(housing$total_bedrooms, na.rm= TRUE)
summary(housing)
housing$total_bedrooms[is.na(housing$total_bedrooms)] = median(housing$total_bedrooms, na.rm= TRUE)
summary(housing)
housing$mean_bedrooms <- housing$total_bedrooms / housing$households
housing$mean_rooms <- housing$total_rooms / housing$households
housing
house <- housing[-c(total_bedrooms)]
house <- housing[-total_bedrooms]
house <- housing[-housing$total_bedrooms]
house <- housing[, -housing$total_bedrooms]
hous
house =  housing[, -housing$total_bedrooms]
housing <- housing[, -housing$total_bedrooms]
housing
drops <- c("total_bedrooms", "total_rooms")
housing <- housing[, !(names(housing) %in% drops)]
housing
colnames(housing)
summary(housing)
summary(housing0
summary(housing)
head(housing)
categories = unique(housing$ocean_proximity)
categories
cat_housing = data.frame(ocean_proximity = housing$ocean_proximity)
cat_housing
cat_housing %>% head
for (cat in categories){}
for (cat in categories){}
for (cat in categories){ }
for (cat in categories){
for(cat in categories){
cat_housing[, cat] = rep(0, nrow(cat_housing))
}
head(housing)
head(cat_housing)
head(cat_housing, 20)
head(cat_housing)
for(i in 1:length(cat_housing$ocean_proximity)){
cat  = as.character(cat)
for(i in 1:length(cat_housing$ocean_proximity)){
cat = as.character(cat_housing$ocean_proximity[i])
cat_housing[, cat][i] = 1
}
head(cat_housing)
cat = as.character(cat_housing$ocean_proximity[i])
cat
cat = as.character(cat_housing$ocean_proximity[1])
cat
cat = as.character(cat_housing$ocean_proximity[10])
cat
cat = as.character(cat_housing$ocean_proximity[100])
cat
cat = as.character(cat_housing$ocean_proximity[4000])
cat
cat_housing[, cat][400]
cat_housing[, cat][400] = 1
cat = as.character(cat_housing$ocean_proximity[1])
cat_housing[, cat][1] = 1
cat_housing %>% head
for(i in 1:length(cat_housing$ocean_proximity)){
cat = as.character(cat_housing$ocean_proximity[i])
cat_housing[,cat][i] = 1
}
head(cat_housing, 400)
head(cat_housing, 500)
head(cat_housing, 800)
head(cat_housing, 1200)
head(cat_housing)
keep_columns <- cat_housing[-cat_housing$ocean_proximity]
keep_columns <- cat_housing[-(cat_housing$ocean_proximity)]
people
keep_columns <- cat_housing[,-1]
keep_columns
tail(keep_columns)
cat
cat_housing = keep_columns
cat_housing %>% tail
catCOL<- names(cat_housing)
catCOL
keepCol<- catCOL[catCOL != "INLAND"]
keepCol
colnames(housing)
drops  = c("ocean_proximity", "median_house_value")
housing_num = housing[, !(names(housing) %in% drops)]
head(housing_num)
names(housing_num)
scaled_housing = scale(housing_num)
head(scaled_housing)
housing_num %>% head
?scale
cat_housing
cat_housing %>% head
scaled_housing
cat_housing %>% head
scaled_housing %>% head
?cbind
cleaned_housing = cbind(cat_housing, scaled_housing)
head(cleaned_housing)
cleaned_housing = cbind(cat_housing, scaled_housing, median_house_value = housing$median_house_value)
head(cleaned_housing)
?sample
?sample.int
set.seed(12345)
floor(645.956)
sample = sample.int(n = nrow(cleaned_housing), size=floor(.8 * nrow(cleaned_housing)), replace= F)
head(sample)
sample
class(sample)
train  = cleaned_housing[sample,]
train %>% head
q()
install.packages("boot")
install.packages("swirl")
library(swirl)
swirl()
library(swirl)
swirl()
install.packages("XML")
.libPaths()
library("XML", lib.loc="/usr/local/lib/R/3.5/site-library")
?rootName
?XMLName
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
.libPaths()
.libPaths()
forest <- read.csv("forests.txt", header = F)
setwd("/Users/ankitchaudhary/Documents/sem1_fall18/cs634_DataMining/week_6/")
library(tidyverse)
library(arules)
library(arulesViz)
forest <- read.csv("forests.txt", header = F)
class(forest)
View(forest)
forest$V2<-c(seq(1:246))
split_forest<-cSplit(mydata,"V1"," ","long")
setwd("/Users/ankitchaudhary/Documents/sem1_fall18/cs634_DataMining/week_6/")
library(tidyverse)
library(arules)
library(arulesViz)
forest <- read.csv("forests.txt", header = F)
forest$V2<-c(seq(1:246))
splitForest<- split(forest, forest[,])
View(splitForest)
forest_transactions<-read.transactions(file = "forests.csv", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
View(forest_transactions)
p<-cSplit(forest,"V1"," ","long")
splitForest<- split.data.frame(forest)
splitForest<- split.data.frame(forest, "V1")
View(splitForest)
write.table(splitForest, file="forests.csv", sep=",", col.names = FALSE, row.names = FALSE)
forest_transactions<-read.transactions(file = "forests.csv", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
View(forest_transactions)
setwd("/Users/ankitchaudhary/Documents/sem1_fall18/cs634_DataMining/week_6/")
library(tidyverse)
library(arules)
library(arulesViz)
library(splitstackshape)
# read data
forest <- read.csv("forests.txt", header = F)
class(forest)
forest$V2<-c(seq(1:246))
View(forest)
write.table(splitForest, file="forests.csv", sep=",", col.names = FALSE, row.names = FALSE)
splitForest<-cSplit(forest,"V1"," ","long")
View(splitForest)
write.table(splitForest, file="forests.csv", sep=",", col.names = FALSE, row.names = FALSE)
forest_transactions<-read.transactions(file = "forests.csv", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
View(forest_transactions)
obj <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items", minlen=1))
inspect(obj)
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items", minlen=1))
inspect(rules)
rules <- apriori(forest_transactions,parameter = list(support = 0.5, confidence = 0.7,target = "frequent items", minlen=1))
inspect(rules)
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items", minlen=1))
inspect(rules)
itemFrequencyPlot(rules,topN=20,type="absolute")
summary(rules)
plot(rules)
itemFrequencyPlot(rules,topN=20,type="absolute")
#inspect(forestTran[1:3])
#itemFrequency(forestTran[,])
itemFrequencyPlot(rules,topN=10,type="absolute")
#inspect(forestTran[1:3])
#itemFrequency(forestTran[,])
itemFrequencyPlot(forest_transactions,topN=10,type="absolute")
#inspect(forestTran[1:3])
itemFrequency(forest_transactions[,])
itemFrequencyPlot(forest_transactions,topN=10,type="absolute")
setwd("/Users/ankitchaudhary/Documents/sem1_fall18/cs634_DataMining/week_6/")
library(tidyverse)
library(arules)
library(arulesViz)
library(splitstackshape)
# read data
forest <- read.csv("forests.txt", header = F)
class(forest)
forest$V2<-c(seq(1:246))
splitForest<-cSplit(forest,"V1"," ","long")
write.table(splitForest, file="forests.csv", sep=",", col.names = FALSE, row.names = FALSE)
forest_transactions<-read.transactions(file = "forests.csv", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items", minlen=1))
inspect(rules)
summary(rules)
inspect(rules)
summary(rules)
plot(rules)
plot(rules, jitter = 0)
itemFrequency(forest_transactions[,])
itemFrequencyPlot(forest_transactions,topN=10,type="absolute")
maximal <-is.maximal(rules)
f<-inspect(rules[maximal])
inspect(rules[maximal])
rules <- apriori(PK,parameter = list(sup=0.50,conf=0.70,target="rules"))
rules <- apriori(forest_transactions,parameter = list(sup=0.50,conf=0.70,target="rules"))
maximal <-is.maximal(rules)
inspect(rules[maximal])
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items", minlen=1))
inspect(rules)
maximal <-is.maximal(rules)
inspect(rules[maximal])
View(rules)
inspect(rules)
summary(rules)
inspect(rules)
#groceryrules <- apriori(forestTran, parameter = list(support = 0.006, confidence = 0.1, minlen = 2))
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items", minlen=1))
#groceryrules <- apriori(forestTran, parameter = list(support = 0.006, confidence = 0.1, minlen = 2))
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items", minlen=2))
#groceryrules <- apriori(forestTran, parameter = list(support = 0.006, confidence = 0.1, minlen = 2))
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items")
#groceryrules <- apriori(forestTran, parameter = list(support = 0.006, confidence = 0.1, minlen = 2))
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items"))
# read data
forest <- read_csv("forests.txt", header = F)
# read data
forest <- read_csv("forests.txt")
View(forest)
forest$V2<-c(seq(1:246))
# read data
forest <- read.csv("forests.txt", header = F)
class(forest)
forest$V2<-c(seq(1:246))
splitForest<-cSplit(forest,"V1"," ","long")
write.table(splitForest, file="forests.csv", sep=",", col.names = FALSE, row.names = FALSE)
forest_transactions<-read.transactions(file = "forests.csv", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items"))
inspect(rules)
summary(rules)
plot(rules, jitter = 0)
itemFrequency(forest_transactions[,])
itemFrequencyPlot(forest_transactions,topN=10,type="absolute")
obj2 <- apriori(transactions_forest,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
obj2 <- apriori(forest_transactions,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
obj3 <- apriori(forest_transactions,parameter = list(sup = 0.4, conf = 0.7,target="rules"))
obj2 <- apriori(forest_transactions,parameter = list(support = 0.2,target = "maximally frequent itemsets"))
obj2 <- apriori(forest_transactions,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
maximal_itemsets <- apriori(forest_transactions,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
maximal <-is.maximal(maximal_itemsets)
maximal_itemsets <- apriori(forest_transactions,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
maximal <-is.maximal(maximal_itemsets)
inspect(rules[maximal])
View(maximal_itemsets)
#inspect(rules[maximal])
inspect(maximal)
maximal_itemsets <- apriori(forest_transactions,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
maximal <-is.maximal(maximal_itemsets)
#inspect(rules[maximal])
inspect(maximal)
rules <- apriori(forest_transactions,parameter = list(sup = 0.4, conf = 0.7,target="rules"))
objects -> inspect(rules)
objects <- inspect(rules)
#inspect(rules[maximal])
inspect(maximal_itemsets)
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items"))
#groceryrules <- apriori(forestTran, parameter = list(support = 0.006, confidence = 0.1, minlen = 2))
rules <- apriori(forest_transactions,parameter = list(support = 0.2,target = "frequent items"))
5
obj <- apriori(transactions_forest,parameter = list(support = 0.5,target = "frequent items"))
View(maximal_itemsets)
setwd("/Users/ankitchaudhary/Documents/sem1_fall18/cs634_DataMining/week_6/")
library(tidyverse)
library(arules)
library(arulesViz)
library(splitstackshape)
forest <- read.csv("forests.txt", header = F)
class(forest)
foresttt<- read.transactions("forest.txt", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
foresttt<- read.transactions(file = "forest.txt", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
foresttt<- read.transactions(forest, rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
forest
setwd("/Users/ankitchaudhary/Documents/sem1_fall18/cs634_DataMining/week_6/")
library(tidyverse)
library(arules)
library(arulesViz)
library(splitstackshape)
# read data
forest <- read.csv("forests.txt", header = F)
class(forest)
orest$V2<-c(seq(1:246))
splitForest<-cSplit(forest,"V1"," ","long")
write.table(splitForest, file="forests.csv", sep=",", col.names = FALSE, row.names = FALSE)
forest_transactions<-read.transactions(file = "forests.csv", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
forest$V2<-c(seq(1:246))
splitForest<-cSplit(forest,"V1"," ","long")
write.table(splitForest, file="forests.csv", sep=",", col.names = FALSE, row.names = FALSE)
forest_transactions<-read.transactions(file = "forests.csv", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
rules <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items"))
inspect(rules)
#groceryrules <- apriori(forestTran, parameter = list(support = 0.006, confidence = 0.1, minlen = 2))
frequent_items <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items"))
inspect(rules)
inspect(frequent_items)
setwd("/Users/ankitchaudhary/Documents/sem1_fall18/cs634_DataMining/week_6/")
library(tidyverse)
library(arules)
library(arulesViz)
library(splitstackshape)
# read data
forest <- read.csv("forests.txt", header = F)
class(forest)
#forestTran<- as(forest,"transactions")
#transaction_forest <- read.transactions(file = "forestTransactions.csv",sep = ",",rm.duplicates = T, format = "single", sep = ",", cols=c(1,2))
### Ques1. Find out the pattern of all plant species (i.e., ids) in the forests with support  threshold = 50%
forest$V2<-c(seq(1:246))
splitForest<-cSplit(forest,"V1"," ","long")
write.table(splitForest, file="forests.csv", sep=",", col.names = FALSE, row.names = FALSE)
forest_transactions<-read.transactions(file = "forests.csv", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
#groceryrules <- apriori(forestTran, parameter = list(support = 0.006, confidence = 0.1, minlen = 2))
frequent_items <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items"))
inspect(frequent_items)
inspect(head(frequent_items))
maximal_itemsets <- apriori(forest_transactions,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
maximal <-is.maximal(maximal_itemsets)
#inspect(rules[maximal])
inspect(maximal_itemsets)
setwd("/Users/ankitchaudhary/Documents/sem1_fall18/cs634_DataMining/week_6/")
library(tidyverse)
library(arules)
library(arulesViz)
library(splitstackshape)
# read data
forest <- read.csv("forests.txt", header = F)
class(forest)
forest$V2<-c(seq(1:246))
splitForest<-cSplit(forest,"V1"," ","long")
write.table(splitForest, file="forests.csv", sep=",", col.names = FALSE, row.names = FALSE)
forest_transactions<-read.transactions(file = "forests.csv", rm.duplicates = FALSE, format = "single", sep = ",", cols=c(1,2))
frequent_items <- apriori(forest_transactions,parameter = list(support = 0.5,target = "frequent items"))
inspect(head(frequent_items))
summary(rules)
plot(rules, jitter = 0)
itemFrequency(forest_transactions[,])
itemFrequencyPlot(forest_transactions,topN=10,type="absolute")
itemFrequencyPlot(head(forest_transactions,topN=10,type="absolute"))
summary(rules)
plot(rules, jitter = 0)
itemFrequency(forest_transactions[,])
itemFrequencyPlot(forest_transactions,topN=10,type="absolute")
maximal_itemsets <- apriori(forest_transactions,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
maximal <-is.maximal(maximal_itemsets)
maximal_itemsets <- apriori(forest_transactions,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
maximal <-is.maximal(maximal_itemsets)
maximal_itemsets <- apriori(forest_transactions,parameter = list(support = 0.5,target = "maximally frequent itemsets"))
inspect(maximal_itemsets)
inspect(maximal_itemsets[maximal])
inspect(head(maximal_itemsets))
rules <- apriori(forest_transactions,parameter = list(sup = 0.4, conf = 0.7,target="rules"))
inspect(rules)
inspect(head(rules))
